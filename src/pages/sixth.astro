---
import Layout from "../layouts/Layout.astro";

const response = await fetch(
	"https://opensheet.elk.sh/1Wjyj120-bA2ogVDcebhr0PLlLtRhupBe65cjZfgmOf4/1",
);
const data = await response.json();

import type { APIRoute } from "astro";
export const GET: APIRoute = (data) => {
	return new Response(
		JSON.stringify({
			message: "This was a GET!",
		}),
	);
};

// No product found
if (!data) {
	return {
		status: 404,
	};
}

// Sort data by score in descending order
const sortedData = [...data].sort(
	(a, b) => parseInt(b.Score) - parseInt(a.Score),
);
---

<Layout title="Student Scores Leaderboard üèÜ">
	<main>
		<div class="stars"></div>
		<div class="stars2"></div>
		<div class="stars3"></div>

		<h1>üéì Student Scores Leaderboard üèÜ</h1>
		<div class="score-table">
			<div class="table-header">
				<div class="rank-col">Rank</div>
				<div class="name-col">Name</div>
				<div class="score-col">Score</div>
				<div class="badge-col">Badge</div>
			</div>
			{
				sortedData.map((item, index) => {
					const score = parseInt(item.Score);
					let badgeEmoji = "";
					let rowClass = "table-row";

					// Assign badges based on score
					if (score >= 90) {
						badgeEmoji = "ü•á";
						rowClass += " gold";
					} else if (score >= 80) {
						badgeEmoji = "ü•à";
						rowClass += " silver";
					} else if (score >= 70) {
						badgeEmoji = "ü•â";
						rowClass += " bronze";
					} else if (score >= 60) {
						badgeEmoji = "üåü";
					} else {
						badgeEmoji = "‚≠ê";
					}

					// Special treatment for top 3
					if (index === 0) rowClass += " first-place";
					if (index === 1) rowClass += " second-place";
					if (index === 2) rowClass += " third-place";

					return (
						<div class={rowClass}>
							<div class="rank-col">{index + 1}</div>
							<div class="name-col">{item.Name}</div>
							<div class="score-col">
								<div
									class="score-bar"
									style={`width: ${score}%;`}
								/>
								<span class="score-text">{item.Score}</span>
							</div>
							<div class="badge-col">{badgeEmoji}</div>
						</div>
					);
				})
			}
		</div>
		<div class="confetti-container" id="confetti"></div>
	</main>
</Layout>

<script>
	// Simple confetti effect
	document.addEventListener("DOMContentLoaded", () => {
		const confettiContainer = document.getElementById("confetti");

		// Create confetti pieces
		for (let i = 0; i < 100; i++) {
			const confetti = document.createElement("div");
			confetti.className = "confetti";
			confetti.style.left = Math.random() * 100 + "vw";
			confetti.style.animationDelay = Math.random() * 5 + "s";
			confetti.style.backgroundColor = `hsl(${Math.random() * 360}, 100%, 50%)`;
			if (confettiContainer) {
				confettiContainer.appendChild(confetti);
			}
		}

		// Add hover effect to rows
		const rows = document.querySelectorAll(".table-row");
		rows.forEach((row) => {
			row.addEventListener("mouseenter", () => {
				row.classList.add("pulse");
			});
			row.addEventListener("mouseleave", () => {
				row.classList.remove("pulse");
			});
		});
	});
</script>

<style>
	/* Background with stars */
	main {
		margin: auto;
		padding: 1rem;
		width: 800px;
		max-width: calc(100% - 2rem);
		color: white;
		font-size: 20px;
		line-height: 1.6;
		position: relative;
		overflow: hidden;
		z-index: 1;
	}

	/* Animated stars background */
	.stars,
	.stars2,
	.stars3 {
		position: fixed;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
		display: block;
		z-index: -1;
	}

	.stars {
		background: url(https://s3-us-west-2.amazonaws.com/s.cdpn.io/1231630/stars.png)
			repeat;
		animation: stars-move 200s linear infinite;
	}

	.stars2 {
		background: url(https://s3-us-west-2.amazonaws.com/s.cdpn.io/1231630/stars2.png)
			repeat;
		animation: stars-move 150s linear infinite;
	}

	.stars3 {
		background: url(https://s3-us-west-2.amazonaws.com/s.cdpn.io/1231630/stars3.png)
			repeat;
		animation: stars-move 100s linear infinite;
	}

	@keyframes stars-move {
		from {
			background-position: 0 0;
		}
		to {
			background-position: 10000px 5000px;
		}
	}

	h1 {
		text-align: center;
		margin-bottom: 2rem;
		font-size: 2.5rem;
		text-shadow: 0 0 10px rgba(136, 58, 234, 0.8);
		animation: glow 2s ease-in-out infinite alternate;
	}

	@keyframes glow {
		from {
			text-shadow: 0 0 10px rgba(136, 58, 234, 0.8);
		}
		to {
			text-shadow:
				0 0 20px rgba(136, 58, 234, 1),
				0 0 30px rgba(224, 204, 250, 0.8);
		}
	}

	.score-table {
		border-radius: 12px;
		overflow: hidden;
		box-shadow: 0 8px 32px rgba(136, 58, 234, 0.3);
		backdrop-filter: blur(4px);
		background: rgba(20, 20, 30, 0.7);
		transform-style: preserve-3d;
		perspective: 1000px;
		transition: all 0.3s ease;
	}

	.table-header {
		display: flex;
		background: linear-gradient(90deg, #8833ea, #5e17eb);
		font-weight: bold;
		padding: 1rem;
		text-transform: uppercase;
		letter-spacing: 1px;
	}

	.table-row {
		display: flex;
		padding: 0.75rem 1rem;
		border-bottom: 1px solid rgba(255, 255, 255, 0.1);
		transition: all 0.3s ease;
		position: relative;
		overflow: hidden;
	}

	.table-row:hover {
		background-color: rgba(224, 204, 250, 0.15);
		transform: translateZ(10px);
	}

	.rank-col {
		flex: 0.5;
		display: flex;
		align-items: center;
		justify-content: center;
		font-weight: bold;
	}

	.name-col {
		flex: 3;
		display: flex;
		align-items: center;
	}

	.score-col {
		flex: 2;
		position: relative;
		display: flex;
		align-items: center;
	}

	.badge-col {
		flex: 0.5;
		display: flex;
		align-items: center;
		justify-content: center;
		font-size: 1.5rem;
	}

	.score-bar {
		position: absolute;
		height: 60%;
		background: linear-gradient(
			90deg,
			rgba(136, 58, 234, 0.3),
			rgba(224, 204, 250, 0.6)
		);
		border-radius: 4px;
		transition: width 1s ease-in-out;
		z-index: 0;
	}

	.score-text {
		position: relative;
		z-index: 1;
		margin-left: 10px;
		font-weight: bold;
	}

	/* Special styling for top 3 */
	.first-place {
		background: linear-gradient(
			90deg,
			rgba(255, 215, 0, 0.1),
			rgba(255, 215, 0, 0.05)
		);
		transform: scale(1.02);
		z-index: 3;
		box-shadow: 0 5px 15px rgba(255, 215, 0, 0.3);
	}

	.second-place {
		background: linear-gradient(
			90deg,
			rgba(192, 192, 192, 0.1),
			rgba(192, 192, 192, 0.05)
		);
		transform: scale(1.01);
		z-index: 2;
	}

	.third-place {
		background: linear-gradient(
			90deg,
			rgba(205, 127, 50, 0.1),
			rgba(205, 127, 50, 0.05)
		);
		transform: scale(1.005);
		z-index: 1;
	}

	.gold .score-bar {
		background: linear-gradient(
			90deg,
			rgba(255, 215, 0, 0.3),
			rgba(255, 215, 0, 0.6)
		);
	}

	.silver .score-bar {
		background: linear-gradient(
			90deg,
			rgba(192, 192, 192, 0.3),
			rgba(192, 192, 192, 0.6)
		);
	}

	.bronze .score-bar {
		background: linear-gradient(
			90deg,
			rgba(205, 127, 50, 0.3),
			rgba(205, 127, 50, 0.6)
		);
	}

	/* Animation for row hover */
	@keyframes pulse {
		0% {
			transform: scale(1);
		}
		50% {
			transform: scale(1.02);
		}
		100% {
			transform: scale(1);
		}
	}

	.pulse {
		animation: pulse 0.5s ease-in-out;
	}

	/* Confetti styles */
	.confetti-container {
		position: fixed;
		width: 100%;
		height: 100%;
		top: 0;
		left: 0;
		pointer-events: none;
		z-index: 0;
	}

	.confetti {
		position: absolute;
		width: 10px;
		height: 10px;
		top: -10px;
		animation: confetti-fall 5s linear infinite;
		opacity: 0.7;
		transform: rotate(0deg);
	}

	@keyframes confetti-fall {
		0% {
			top: -10px;
			transform: rotate(0deg);
		}
		100% {
			top: 100vh;
			transform: rotate(360deg);
		}
	}
</style>
