---
import Layout from "../layouts/Layout.astro";

const response = await fetch(
    "https://opensheet.elk.sh/1Wjyj120-bA2ogVDcebhr0PLlLtRhupBe65cjZfgmOf4/1",
);
const data = await response.json();

import type { APIRoute } from "astro";
export const GET: APIRoute = (data) => {
    return new Response(
        JSON.stringify({
            message: "This was a GET!",
        }),
    );
};

// No product found
if (!data) {
    return {
        status: 404,
    };
}

// Sort data by score in descending order
const sortedData = [...data].sort(
    (a, b) => parseInt(b.Score) - parseInt(a.Score),
);

// Function to create segments array for the progress bar
function createSegments(score: number) {
    const totalSegments = 10; // 10 segments for 100%
    const filledSegments = Math.floor(score / (100 / totalSegments));
    return Array(totalSegments)
        .fill(0)
        .map((_, i) => i < filledSegments);
}
---

<Layout title="Student Performance Dashboard">
    <main>
        <h1>Student Performance Dashboard</h1>
        <div class="score-table">
            <div class="table-header">
                <div class="name-col">Student Name</div>
                <div class="score-col">Score</div>
            </div>
            {
                sortedData.map((item, index) => {
                    const score = parseInt(item.Score);
                    let rowClass = "table-row";
                    const segments = createSegments(score);

                    // Special treatment for top performers
                    if (index === 0) rowClass += " first-place";
                    if (index === 1) rowClass += " second-place";
                    if (index === 2) rowClass += " third-place";

                    return (
                        <div class={rowClass}>
                            <div class="name-col">{item.Name}</div>
                            <div class="score-col">
                                <div class="segmented-bar">
                                    {segments.map((isFilled, i) => (
                                        <div
                                            class={`segment ${isFilled ? "filled" : ""} ${
                                                index === 0
                                                    ? "gold-segment"
                                                    : ""
                                            }`}
                                        />
                                    ))}
                                </div>
                                <span class="score-text">{item.Score}</span>
                            </div>
                        </div>
                    );
                })
            }
        </div>
    </main>
</Layout>

<script>
    // Add hover effect to rows
    document.addEventListener("DOMContentLoaded", () => {
        const rows = document.querySelectorAll(".table-row");
        rows.forEach((row) => {
            row.addEventListener("mouseenter", () => {
                row.classList.add("highlight");
            });
            row.addEventListener("mouseleave", () => {
                row.classList.remove("highlight");
            });
        });
    });
</script>

<style>
    :root {
        /* Black and white palette */
        --primary: #000000;
        --primary-content: #ffffff;
        --secondary: #ffffff;

        --background: #0a0a0a;
        --foreground: #1a1a1a;
        --border: #2a2a2a;

        --copy: #ffffff;
        --copy-light: #aaaaaa;

        /* Monochrome component variables */
        --segment-empty: #333333;
        --segment-filled: #ffffff;
        --segment-gold: #e0e0e0;

        /* Rounded corner variables */
        --radius-sm: 4px;
        --radius-md: 8px;
        --radius-lg: 16px;
    }

    main {
        margin: auto;
        padding: 2rem;
        width: 800px;
        max-width: calc(100% - 2rem);
        color: var(--copy);
        font-size: 16px;
        line-height: 1.6;
        background-color: var(--background);
        font-family:
            system-ui,
            -apple-system,
            sans-serif;
        min-height: 100vh;
    }

    h1 {
        text-align: center;
        margin-bottom: 2rem;
        color: var(--copy);
        font-size: 1.75rem;
        font-weight: 500;
    }

    .score-table {
        background: var(--foreground);
        overflow: hidden;
        border-radius: var(--radius-lg);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
    }

    .table-header {
        display: flex;
        background: var(--primary);
        color: var(--primary-content);
        font-weight: 500;
        padding: 1rem;
        border-radius: var(--radius-lg) var(--radius-lg) 0 0;
    }

    .table-row {
        display: flex;
        padding: 0.75rem 1rem;
        border-bottom: 1px solid var(--border);
        position: relative;
    }

    .table-row:last-child {
        border-bottom: none;
        border-radius: 0 0 var(--radius-lg) var(--radius-lg);
    }

    .name-col {
        flex: 2;
        display: flex;
        align-items: center;
        color: var(--copy);
    }

    .score-col {
        flex: 1;
        display: flex;
        align-items: center;
        border-left: 1px solid var(--border);
        padding-left: 10px;
    }

    /* Rounded segmented progress bar */
    .segmented-bar {
        display: flex;
        width: 70%;
        height: 14px;
        gap: 3px;
        align-items: center;
        background: rgba(0, 0, 0, 0.2);
        border-radius: var(--radius-md);
        padding: 3px;
    }

    .segment {
        flex: 1;
        height: 100%;
        background-color: var(--segment-empty);
        border-radius: var(--radius-sm);
        transition: transform 0.2s ease;
    }

    .segment.filled {
        background-color: var(--segment-filled);
        border-radius: var(--radius-sm);
    }

    .gold-segment.filled {
        background-color: var(--segment-gold);
        border-radius: var(--radius-sm);
    }

    .score-text {
        margin-left: 10px;
        font-weight: 500;
        color: var(--copy);
        background: rgba(255, 255, 255, 0.1);
        padding: 3px 10px;
        border-radius: var(--radius-md);
    }

    /* Minimal styling for top performers */
    .first-place {
        background-color: rgba(255, 255, 255, 0.05);
    }

    .first-place::before {
        content: "";
        position: absolute;
        left: 0;
        top: 8px;
        bottom: 8px;
        width: 3px;
        background: var(--secondary);
        border-radius: 0 var(--radius-sm) var(--radius-sm) 0;
    }

    .second-place::before,
    .third-place::before {
        content: "";
        position: absolute;
        left: 0;
        top: 8px;
        bottom: 8px;
        width: 3px;
        background: var(--copy-light);
        border-radius: 0 var(--radius-sm) var(--radius-sm) 0;
    }

    /* Simplified hover effect */
    .highlight {
        background-color: rgba(255, 255, 255, 0.05);
    }

    .highlight .segment.filled {
        transform: scaleY(1.15);
    }

    /* Responsive adjustments */
    @media (max-width: 768px) {
        main {
            padding: 1rem;
            width: 100%;
        }

        .segmented-bar {
            width: 60%;
        }
    }

    /* Apply theme to the entire page */
    :global(body) {
        background-color: var(--background);
        margin: 0;
        padding: 0;
    }
</style>
